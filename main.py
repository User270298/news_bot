import asyncio
import os
from aiogram import Bot, Dispatcher, Router, types
from get_news import news_rus_eng, send_news_ai_rus_eng
from content_main_channel import generate_interesting_fact, generate_market_analysis, weekly_summary, main_post
from config import OPENAI_API_KEY, CHANNEL_ID, API_TOKEN
import logging
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command

ADMIN_ID = 947159905

router = Router()
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

NEWS_FILE_PATH = 'weekly_news.txt'


def save_news_to_file(russian_news, english_news):
    with open(NEWS_FILE_PATH, 'a', encoding='utf-8') as file:
        file.write(f"RUS: {russian_news}\n")
        file.write(f"ENG: {english_news}\n\n")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_news_from_file():
    if os.path.exists(NEWS_FILE_PATH):
        with open(NEWS_FILE_PATH, 'r', encoding='utf-8') as file:
            return file.read()
    return ''


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–æ–±—â–µ–Ω–∏—è)
def clear_news_file():
    with open(NEWS_FILE_PATH, 'w', encoding='utf-8') as file:
        file.write('')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def scheduled_news_sender():
    while True:
        try:
            now = datetime.now()
            if now.hour == 10 and now.minute == 0:
                russian_news, english_news = await news_rus_eng()
                if russian_news and english_news:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ —Ñ–∞–π–ª
                    save_news_to_file(russian_news, english_news)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                    await send_news_ai_rus_eng()
                    await main_post()

            # –ï—Å–ª–∏ –ø—è—Ç–Ω–∏—Ü–∞ (weekday == 4), –≤ 12:00 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
            if now.weekday() == 4 and now.hour == 12 and now.minute == 0:
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
                weekly_news_data = load_news_from_file()
                if weekly_news_data:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–±—â–µ–Ω–∏–µ
                    await weekly_summary(weekly_news_data)
                    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    clear_news_file()

            await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"Error fetching or sending news: {e}")


MAX_POSTS_PER_DAY = 3

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
START_HOUR = 6
END_HOUR = 16

# async def schedule_content_generation():
#     posts_today = 0
#     next_post_time = None
#
#     while True:
#         now = datetime.now()
#
#         # –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤ –∏ `next_post_time` –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
#         if now.hour == 0 and now.minute == 0:
#             posts_today = 0
#             next_post_time = None
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ–¥–æ—à–ª–æ
#         if posts_today < MAX_POSTS_PER_DAY and (next_post_time is None or now >= next_post_time):
#             # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
#             next_post_hour = random.randint(START_HOUR, END_HOUR)
#             next_post_minute = random.randint(0, 59)
#             next_post_time = now.replace(hour=next_post_hour, minute=next_post_minute, second=0, microsecond=0)
#
#             # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
#             if next_post_time < now:
#                 next_post_time += timedelta(days=1)
#
#         # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞, –ø—É–±–ª–∏–∫—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
#         if next_post_time is not None and now >= next_post_time:
#             content_type = random.choice([generate_market_analysis, generate_interesting_fact])
#             await content_type()  # –ü—É–±–ª–∏–∫—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
#
#             posts_today += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
#             next_post_time = None  # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
#         await asyncio.sleep(60)

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="üìä –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", callback_data="post_analysis")],
        [InlineKeyboardButton(text="üåæ –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="post_fact")]
    ]
)


@router.message(Command("admin"))
async def show_admin_panel(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda c: c.data in ["post_analysis", "post_fact", 'main_menu'])
async def handle_admin_buttons(callback_query: CallbackQuery):
    action = callback_query.data
    if action == "post_analysis":
        await generate_market_analysis()
    elif action == "post_fact":
        await generate_interesting_fact()
    elif action == "main_menu":
        await main_post()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö
    await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")


async def on_startup(dp):
    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_router(router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    asyncio.create_task(scheduled_news_sender())
    # asyncio.create_task(schedule_content_generation())


async def main():
    # –í–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp["bot"] = bot

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup(dp)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
    await dp.start_polling(bot)


async def run_bot_with_restart():
    while True:
        try:
            await main()  # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        except Exception as e:
            logging.error(f"Bot encountered an error: {e}")
            await asyncio.sleep(10)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º


if __name__ == '__main__':
    asyncio.run(run_bot_with_restart())
