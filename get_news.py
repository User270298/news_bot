import openai
from config import OPENAI_API_KEY, CHANNEL_ID, API_TOKEN
from parsers import oilworld_parser, prozerno_parser, zol_parser, agroinvestor_parser, aemcx_parser, agroinvestor, \
    tg_channel, format_news, oleoscope, agrotrend_parse, interfaks_parse, agroxxi_parse  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
from price import final_output, txt
# from selenium_parsers import collect_articles_text  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium
from aiogram import Bot
import datetime

openai.api_key = OPENAI_API_KEY
bot = Bot(token=API_TOKEN)


def converted_file(url):
    with open(url, 'r', encoding='utf-8') as file:
        return file.read()


def news_archive(url, text, date):
    with open(url, 'a', encoding='utf-8') as file:
        file.write(f'{date},\n, {text}')


async def fetch_news():
    oilworld_news = oilworld_parser('https://www.oilworld.ru/')
    zol_news = zol_parser('https://www.zol.ru/')
    prozerno_news = prozerno_parser('https://prozerno.ru/')
    investing_news = agroinvestor_parser('https://www.agroinvestor.ru/')
    oleoscope_news = oleoscope('https://oleoscope.com/news/')
    agrotrend_news = agrotrend_parse('https://agrotrend.ru/?s=–ó–µ—Ä–Ω–æ')
    interfaks_news = interfaks_parse('https://www.interfax.ru/business/')
    agroxxi_news = agroxxi_parse('https://www.agroxxi.ru/mirovye-agronovosti')
    formatted_agroxxi_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.agroxxi.ru', agroxxi_news)
    # aemcx_news = aemcx_parser('https://www.aemcx.com/')
    formatted_oilworld_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.oilworld.ru', oilworld_news)
    formatted_zol_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.zol.ru', zol_news)
    formatted_prozerno_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://prozerno.ru', prozerno_news)
    formatted_investing_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.agroinvestor.ru', investing_news)
    formatted_oleoscope_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://oleoscope.com', oleoscope_news)
    formatted_agrotrend_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://agrotrend.ru', agrotrend_news)
    formatted_interfax_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.interfax.ru', interfaks_news)
    # formatted_aemcx_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: AEMCX', aemcx)
    formatted_tg_channel = tg_channel()
    prompt = (
        f"–ù–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–æ–≤: \n{formatted_agroxxi_news}\n{formatted_zol_news}\n{formatted_prozerno_news}\n{formatted_investing_news}\n{formatted_tg_channel}\n{formatted_oilworld_news}\n{formatted_oleoscope_news}\n{formatted_agrotrend_news}\n{formatted_interfax_news}")  #
    news_archive('news_archive.txt', prompt, datetime.datetime.now())
    file = converted_file(r'example.txt')
    try:
        response = await openai.ChatCompletion.acreate(
            model='gpt-4o-mini',
            messages=[
                {"role": "system", "content": f'''–¢—ã –¥–æ–ª–∂–µ–Ω —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ,
                                                 –¥–µ–ª–∞—è —Ç–µ–∫—Å—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –ø–æ —Å—Ç–∏–ª—é.
                                                 –ù–µ –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å
                                                 —Ç–µ–∫—Å—Ç –∂–∏–≤–µ–µ.
                                                 –í –Ω–æ–≤–æ—Å—Ç—è—Ö –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞():
                                                 CBOP / MATIF / AgRurual/ strategie grains / safras & Mercado / intertek / amspec
                                                 –∏ –≤—Å–µ –≤ –∞—Å–ø–µ–∫—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É –ø–∞–ª—Å—å–º–æ–≤–æ–µ –º–∞—Å–ª–æ , –ø–æ—Å–µ–≤ , –∫—É–∫—É—Ä—É–∑–∞ ,
                                                 –ø—à–µ–Ω–∏—Ü–∞ , —Å–æ—è, –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ , —è—á–º–µ–Ω—å , –ø—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞—è , usda –æ—Ç—á–µ—Ç ,–∑–∞–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–∑–æ–≤
                                                  –ù–æ–≤–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏ —Ä–∞–∑–±–∏–≤–∞—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–æ–±—ã—Ç–∏—è.
                                                  –¢–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∏–∂–µ.
                                                  –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π:
                                                  {file}
                                                  –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –æ–±–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                                                  –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ —É–∫–∞–∑—ã–≤–∞–π –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∞–π—Ç—ã.'''
                 },
                {"role": "user", "content": prompt},
            ],
            max_tokens=10000
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª Telegram
async def send_news_to_channel(news):
    if news:
        await bot.send_message(CHANNEL_ID, f'''AGROCOR INFORMS üåæ\n\n{final_output}\n{txt}\n\n{news}\n\nü§ùOFFERS ‚û°‚û°‚û° https://t.me/+F8OsiZiNLg00NTY6\nüö¢ VESSEL CATCHER ‚û°‚û°‚û° https://t.me/+AqsaM2xqhS44NDQy\nüî•üí∞ TRADER‚ÄôS STORIES ‚û°‚û°‚û° https://t.me/+bzwCOPgtSWMyNTQ
''', disable_web_page_preview=True)
    else:
        await bot.send_message(CHANNEL_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")