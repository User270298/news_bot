import asyncio

import openai
from config import OPENAI_API_KEY, CHANNEL_ID, API_TOKEN
from parsers import oilworld_parser, prozerno_parser, zol_parser, agroinvestor_parser, aemcx_parser, agroinvestor, \
    tg_channel, format_news, oleoscope, agrotrend_parse, interfaks_parse, agroxxi_parse  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
from price import final_output, txt_chicago, txt_moex, txt_matif
# from selenium_parsers import collect_articles_text  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium
from aiogram import Bot
import datetime

openai.api_key = OPENAI_API_KEY
bot = Bot(token=API_TOKEN)


def converted_file(url):
    with open(url, 'r', encoding='utf-8') as file:
        return file.read()


def news_archive(url, text, date):
    with open(url, 'w', encoding='utf-8') as file:
        file.write(f'{date},\n, {text}')


# async def fetch_news():
#     oilworld_news = oilworld_parser('https://www.oilworld.ru/')
#     zol_news = zol_parser('https://www.zol.ru/')
#     prozerno_news = prozerno_parser('https://prozerno.ru/')
#     investing_news = agroinvestor_parser('https://www.agroinvestor.ru/')
#     oleoscope_news = oleoscope('https://oleoscope.com/news/')
#     agrotrend_news = agrotrend_parse('https://agrotrend.ru/?s=–ó–µ—Ä–Ω–æ')
#     interfaks_news = interfaks_parse('https://www.interfax.ru/business/')
#     agroxxi_news = agroxxi_parse('https://www.agroxxi.ru/mirovye-agronovosti')
#     formatted_agroxxi_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.agroxxi.ru', agroxxi_news)
#     # aemcx_news = aemcx_parser('https://www.aemcx.com/')
#     formatted_oilworld_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.oilworld.ru', oilworld_news)
#     formatted_zol_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.zol.ru', zol_news)
#     formatted_prozerno_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://prozerno.ru', prozerno_news)
#     formatted_investing_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.agroinvestor.ru', investing_news)
#     formatted_oleoscope_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://oleoscope.com', oleoscope_news)
#     formatted_agrotrend_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://agrotrend.ru', agrotrend_news)
#     formatted_interfax_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.interfax.ru', interfaks_news)
#     # formatted_aemcx_news = format_news('–ò—Å—Ç–æ—á–Ω–∏–∫: AEMCX', aemcx)
#     formatted_tg_channel = tg_channel()
#     prompt = (
#         f"–ù–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–æ–≤: \n{formatted_agroxxi_news}\n{formatted_zol_news}\n{formatted_prozerno_news}\n{formatted_investing_news}\n{formatted_tg_channel}\n{formatted_oilworld_news}\n{formatted_oleoscope_news}\n{formatted_agrotrend_news}\n{formatted_interfax_news}")  #
#     news_archive('news_archive.txt', prompt, datetime.datetime.now())
#     file = converted_file(r'example.txt')
#     try:
#         response = await openai.ChatCompletion.acreate(
#             model='gpt-4o-mini',
#             messages=[
#                 {"role": "system", "content":  f'''–°–æ–±–µ—Ä–∏ –∏ –æ–±–æ–±—â–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤—ã–¥–µ–ª—è—è –∑–Ω–∞—á–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º. –ü–æ–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∂–∏–≤–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:
#
# 1. **–¢–æ–Ω –∏ —Å—Ç–∏–ª—å**:
#    - –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
#    - –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –ø–æ —Å—Ç–∏–ª—é, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏.
#    - –ö–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–∏—à–∏ –æ—Ç—Ä—ã–≤–∫–æ–º –∏ —Ä–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç—å—é.
#    - –ü–æ–¥–∞–≤–∞–π –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ, –∏ –∏–∑–±–µ–≥–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
#
# 2. **–¢–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π**:
#    –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:
#    GASC, TMO, TCP, OC, MIT, SAGO, GTC, OAIC, DGF, ODC, SLAL, OFAC, BRICS, CBOP, MATIF, AgRurual, strategie grains, safras & Mercado, intertek, amspec, –ø–∞–ª—å–º–æ–≤–æ–µ –º–∞—Å–ª–æ, –ø–æ—Å–µ–≤, –∫—É–∫—É—Ä—É–∑–∞, –ø—à–µ–Ω–∏—Ü–∞, —Å–æ—è, –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —è—á–º–µ–Ω—å, –ø—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞—è, usda –æ—Ç—á–µ—Ç, –∑–∞–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–∑–æ–≤, WHFOB, CRFOB, BRFOB, LCO, brent, ZS, —Å–æ–µ–≤—ã–µ –±–æ–±—ã, ZC, –∫—É–∫—É—Ä—É–∑–∞, ZW, agritel, deepwater, shallowwater, FOB, CIF, Incoterms, GAFTA, FOSFA, SBPP, SFCO, SFMP, DDGS, pulses, WASDE, Report, Rabobank, –ë–∞–ª—Ç–∏–π—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å, –ò–Ω–¥–µ–∫—Å Panamax, S&P Global Commodity Insights, Abiove, Weekly Soybean Complex, IGC, oilworld.ru, FREE ON-BOARD BLACK SEA PORTS, SUNFLOWER OIL EXPORT, SUNFLOWER MEAL EXPORT, PRICE SUNFLOWER OIL U.S. DOLLAR METRIC TON, PALM OIL MALASYA CRUDE 1, NASDAQ (–±–∏—Ä–∂–∞) Commodity Index Bean Oil Excess Return, SOYBEAN OIL FUTURES FRONT-MONTH CONTRACT.
#
# 3. **–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π**:
#    {file}
#
# 4. **–û–±–æ–±—â–µ–Ω–∏–µ**:
#    –î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö.
#    '''
#
#                  },
#                 {"role": "user", "content": prompt},
#             ],
#             max_tokens=10000
#         )
#         return response['choices'][0]['message']['content'].strip()
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
#         return None
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª Telegram
# async def send_news_to_channel(news):
#     if news:
#         await bot.send_message(CHANNEL_ID, f'''AGROCOR INFORMS üåæ\n\n{final_output}\n{txt}\n\n{news}\n\nü§ùOFFERS ‚û°‚û°‚û° https://t.me/+F8OsiZiNLg00NTY6\nüö¢ VESSEL CATCHER ‚û°‚û°‚û° https://t.me/+AqsaM2xqhS44NDQy\nüî•üí∞ TRADER‚ÄôS STORIES ‚û°‚û°‚û° https://t.me/+bzwCOPgtSWMyNTQ
# ''', disable_web_page_preview=True)
#     else:
#         await bot.send_message(CHANNEL_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
#

async def news_rus_eng():
    file = converted_file(r'example.txt')
    txt = f'''–°–æ–±–µ—Ä–∏ –∏ –æ–±–æ–±—â–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤—ã–¥–µ–ª—è—è –∑–Ω–∞—á–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º. –ü–æ–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∂–∏–≤–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:

    1. **–¢–æ–Ω –∏ —Å—Ç–∏–ª—å**:
       - –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
       - –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –ø–æ —Å—Ç–∏–ª—é, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏.
       - –ö–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–∏—à–∏ –æ—Ç—Ä—ã–≤–∫–æ–º –∏ —Ä–∞–∑–º–µ—â–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–¥ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç—å—é.
       - –ü–æ–¥–∞–≤–∞–π –Ω–æ–≤–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ, –∏ –∏–∑–±–µ–≥–∞–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
       - –û–≥—Ä–∞–Ω–∏—á—å –æ–±—â–∏–π —Ç–µ–∫—Å—Ç –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤.

    2. **–¢–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π**:
       –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:
       GASC, TMO, TCP, OC, MIT, SAGO, GTC, OAIC, DGF, ODC, SLAL, OFAC, BRICS, CBOP, MATIF, AgRurual, strategie grains, safras & Mercado, intertek, amspec, –ø–∞–ª—å–º–æ–≤–æ–µ –º–∞—Å–ª–æ, –ø–æ—Å–µ–≤, –∫—É–∫—É—Ä—É–∑–∞, –ø—à–µ–Ω–∏—Ü–∞, —Å–æ—è, –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, —è—á–º–µ–Ω—å, –ø—Ä–æ–≥–Ω–æ–∑ —É—Ä–æ–∂–∞—è, usda –æ—Ç—á–µ—Ç, –∑–∞–¥–µ—Ä–∂–∫–∞ –≥—Ä—É–∑–æ–≤, WHFOB, CRFOB, BRFOB, LCO, brent, ZS, —Å–æ–µ–≤—ã–µ –±–æ–±—ã, ZC, –∫—É–∫—É—Ä—É–∑–∞, ZW, agritel, deepwater, shallowwater, FOB, CIF, Incoterms, GAFTA, FOSFA, SBPP, SFCO, SFMP, DDGS, pulses, WASDE, Report, Rabobank, –ë–∞–ª—Ç–∏–π—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å, –ò–Ω–¥–µ–∫—Å Panamax, S&P Global Commodity Insights, Abiove, Weekly Soybean Complex, IGC, oilworld.ru, FREE ON-BOARD BLACK SEA PORTS, SUNFLOWER OIL EXPORT, SUNFLOWER MEAL EXPORT, PRICE SUNFLOWER OIL U.S. DOLLAR METRIC TON, PALM OIL MALASYA CRUDE 1, NASDAQ (–±–∏—Ä–∂–∞) Commodity Index Bean Oil Excess Return, SOYBEAN OIL FUTURES FRONT-MONTH CONTRACT.

    3. **–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π**:
       {file}

    4. **–û–±–æ–±—â–µ–Ω–∏–µ**:
       –î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ü–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö.
       '''

    try:
        response = await openai.ChatCompletion.acreate(
            model='gpt-4o-mini',
            messages=[
                {"role": "system", "content": txt},
                {"role": "user", "content": txt},
            ],
            max_tokens=3000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è 4000 —Å–∏–º–≤–æ–ª–æ–≤
        )
        russian_news = response['choices'][0]['message']['content'].strip()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(russian_news) > 4000:
            russian_news = russian_news[:4000]

        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translation_prompt = f"Please translate the following text to English:\n\n{russian_news}"
        translation_response = await openai.ChatCompletion.acreate(
            model='gpt-4o-mini',
            messages=[
                {"role": "system", "content": "Translate the news text to English."},
                {"role": "user", "content": translation_prompt},
            ],
            max_tokens=3000
        )
        english_news = translation_response['choices'][0]['message']['content'].strip()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4000 —Å–∏–º–≤–æ–ª–æ–≤
        if len(english_news) > 4000:
            english_news = english_news[:4000]

        return russian_news, english_news

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
        return None, None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª Telegram
async def send_news_ai_rus_eng():
    russian_news, english_news = await news_rus_eng()

    if russian_news and english_news:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        await bot.send_message(CHANNEL_ID, f'''AGROCOR INFORMS üåæ\nRUS\n\n{final_output}\n{txt_moex}\n{txt_chicago}\n{txt_matif}\n\n{russian_news}\n\nü§ùOFFERS ‚û°‚û°‚û° https://t.me/+F8OsiZiNLg00NTY6\nüö¢ VESSEL CATCHER ‚û°‚û°‚û° https://t.me/+AqsaM2xqhS44NDQy\nüî•üí∞ TRADER‚ÄôS STORIES ‚û°‚û°‚û° https://t.me/+bzwCOPgtSWMyNTQ
        ''', disable_web_page_preview=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await bot.send_message(CHANNEL_ID, f'''AGROCOR INFORMS üåæ\nENG\n\n{final_output}\n{txt_moex}\n{txt_chicago}\n{txt_matif}\n\n{english_news}\n\nü§ùOFFERS ‚û°‚û°‚û° https://t.me/+F8OsiZiNLg00NTY6\nüö¢ VESSEL CATCHER ‚û°‚û°‚û° https://t.me/+AqsaM2xqhS44NDQy\nüî•üí∞ TRADER‚ÄôS STORIES ‚û°‚û°‚û° https://t.me/+bzwCOPgtSWMyNTQ
        ''', disable_web_page_preview=True)
    else:
        await bot.send_message(CHANNEL_ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")


