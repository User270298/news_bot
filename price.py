import yfinance as yf
from bs4 import BeautifulSoup
import requests

# –¢–∏–∫–µ—Ä—ã –¥–ª—è –±–∏—Ç–∫–æ–∏–Ω–∞, –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –Ω–µ—Ñ—Ç–∏
tickers = {
    'Bitcoin': 'BTC-USD',
    'USD/RUB': 'USDRUB=X',
    'EUR/RUB': 'EURRUB=X',
    'Brent Crude Oil': 'BZ=F',
    'USD/CNY': 'CNY=X',
    'USD/TRY': 'TRY=X',
    'USD/EUR': 'EURUSD=X',
}

# –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –¥–Ω–µ–π)
period = "5d"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
def get_prices():
    prices = {}

    for name, ticker in tickers.items():
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–∏–∫–µ—Ä–∞
        stock = yf.Ticker(ticker)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = stock.history(period=period)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DataFrame –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
        if not data.empty and len(data) > 0:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            last_price = data['Close'].iloc[-1]
            # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            if name == 'Bitcoin':
                prices['btc_price'] = round(last_price, 1)
            elif name == 'Brent Crude Oil':
                prices['oil_price'] = round(last_price, 2)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
                prices[name.lower().replace('/', '_')] = round(last_price, 4)
        else:
            prices[name] = None  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º None

    return prices


# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–≥—Ä–æ–∫—É–ª—å—Ç—É—Ä—ã —Å –±–∏—Ä–∂ CME –∏ MATIF
def get_cme_matif_prices():
    # CME (–ß–∏–∫–∞–≥—Å–∫–∞—è –±–∏—Ä–∂–∞)
    cme_tickers = {
        '–ü—à–µ–Ω–∏—Ü–∞': 'ZW=F',
        '–ö—É–∫—É—Ä—É–∑–∞': 'ZC=F',
        '–°–æ–µ–≤—ã–µ –±–æ–±—ã': 'ZS=F',
    }
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    cme_output = "CHICAGO - "
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CME
    for name, ticker in cme_tickers.items():
        stock = yf.Ticker(ticker)
        data = stock.history(period='1d')
        if not data.empty:
            last_price = data['Close'].iloc[-1]
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            if name == "–ü—à–µ–Ω–∏—Ü–∞":
                cme_output += f"{last_price:.2f}$ wheatüåæ, "
            elif name == "–ö—É–∫—É—Ä—É–∑–∞":
                cme_output += f"{last_price:.2f}$ cornüåΩ, "
            elif name == "–°–æ–µ–≤—ã–µ –±–æ–±—ã":
                cme_output += f"{last_price:.2f}$ soybeansüçà"
        else:
            cme_output += f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {name.lower()}üåæ, "

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª
    if cme_output.endswith(", "):
        cme_output = cme_output[:-2]

    return cme_output





def get_latest_data(ticker_dict):
    data = {}
    for name, ticker in ticker_dict.items():
        stock = yf.Ticker(ticker)
        latest_data = stock.history(period="1mo")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        if not latest_data.empty:
            latest_close = latest_data['Close'].iloc[-1]
            data[name] = latest_close
    return data


def get_maex():
    urls = ['https://ru.investing.com/indices/barley-fob-black-sea-index',
            'https://ru.investing.com/indices/wheat-fob-black-sea-index']
    prices = {}
    count = 0
    for url in urls:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'
        }
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            soup = BeautifulSoup(response.content, 'html.parser')
            price = soup.find('div', class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text
            last_price = soup.find('span', class_='key-info_dd-numeric__ZQFIs').text
            price = price.replace(',', '.')
            last_price = last_price.replace(',', '.')
            if count == 0:
                prices['Barley'] = {'current_price': price, 'last_price': last_price}
            if count == 1:
                prices['Wheat'] = {'current_price': price, 'last_price': last_price}
            count += 1
        else:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}')

    url = 'https://investfuture.ru/russian_indexes/history/4621'
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'
    }
    # –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        table = soup.find('table', class_='table table-bordered table-hover')
        rows = table.find_all('tr')[1:3]  # –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        values = [float(row.find_all('td')[1].text.replace(',', '.')) for row in rows]
        prices['Corn'] = {'current_price': values[0], 'last_price': values[1]}
    else:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}')
    return prices


def get_matif():
    urls = ['https://ru.investing.com/commodities/us-corn?cid=964533',
            'https://ru.investing.com/commodities/milling-wheat-n2', 'https://ru.investing.com/commodities/rapeseed']
    prices = {}
    count = 0
    for url in urls:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36'
        }
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BeautifulSoup –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            soup = BeautifulSoup(response.content, 'html.parser')
            price = soup.find('div', class_='text-5xl/9 font-bold text-[#232526] md:text-[42px] md:leading-[60px]').text
            last_price = soup.find('span', class_='key-info_dd-numeric__ZQFIs').text
            price = price.replace(',', '.')
            last_price = last_price.replace(',', '.')
            if count == 0:
                prices['Corn'] = {'current_price': price, 'last_price': last_price}
            if count == 1:
                prices['Wheat'] = {'current_price': price, 'last_price': last_price}
            if count == 2:
                prices['Rapeseed'] = {'current_price': price, 'last_price': last_price}
            count += 1
        else:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}')
    return prices
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
prices_cme = get_cme_matif_prices()
prices = get_prices()

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
final_output = (
    f"üíµ USD/RUB: {prices.get('usd_rub', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}‚ÇΩ"
    f"üí∂ EUR/RUB: {prices.get('eur_rub', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}‚ÇΩ\n"
    # f"üíπ USD/EUR: {prices.get('usd_eur', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}‚Ç¨\n"
    # f"üá®üá≥ USD/CNY: {prices.get('usd_cny', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬•\n"
    # f"üáπüá∑ USD/TRY: {prices.get('usd_try', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}‚Ç∫\n"
    f"üò± Bitcoin: {prices.get('btc_price', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}$\n"
    f"üõ¢ Brent Crude Oil: {prices.get('oil_price', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}$\n"
)
# print(final_output)
# f"{prices_cme}\n"

ticker = {
    'Wheat_CHICAGO': 'ZW=F',  # –ü—à–µ–Ω–∏—Ü–∞ –Ω–∞ CME
    'Soybeans_CHICAGO': 'ZS=F',  # –°–æ—è –Ω–∞ CME
    'Corn_CHICAGO': 'ZC=F',  # –ö—É–∫—É—Ä—É–∑–∞ –Ω–∞ CME
    # –†–∞–ø—Å –Ω–∞ MATIF
}
moex=get_maex()
matif = get_matif()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
commodity_data = get_latest_data(ticker)
txt_chicago = f"CHICAGO - {commodity_data['Wheat_CHICAGO']}$ wheatüåæ, {commodity_data['Soybeans_CHICAGO']}$ soybeansüçà, {commodity_data['Corn_CHICAGO']}$ cornüåΩ "
txt_matif = f"MATIF - {matif['Wheat']['current_price']}$ wheatüåæ, {matif['Rapeseed']['current_price']}$ rapeseedüå±, {matif['Corn']['current_price']}$ cornüåΩ "
txt_moex=f"MOEX - {moex['Wheat']['current_price']}$ wheatüåæ, {moex['Barley']['current_price']}$ barleyü•¨, {moex['Corn']['current_price']}$ cornüåΩ "
